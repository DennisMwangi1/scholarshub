
import { toast } from '@/components/ui/use-toast';

// Simulated storage for authenticated users - in a real app, you'd use a proper authentication backend
interface User {
  id: string;
  role: 'student' | 'lecturer';
  name: string;
  email: string;
  registrationDate?: string;
  department?: string;
  studentId?: string;
  employeeId?: string;
  courses?: string[];
}

interface RegisterData {
  name: string;
  email: string;
  password: string;
  role: 'student' | 'lecturer';
}

// This is a dummy database - in a real app, these would be stored in a secure backend
let authenticatedUser: User | null = null;
const users: Record<string, User> = {
  'student@example.com': {
    id: 'ST123456',
    role: 'student',
    name: 'John Doe',
    email: 'student@example.com',
    registrationDate: '2023-09-01',
    department: 'Computer Science',
    studentId: 'ST123456',
    courses: ['CS101', 'MATH201', 'ENG105', 'PHYS101']
  },
  'lecturer@example.com': {
    id: 'LC789012',
    role: 'lecturer',
    name: 'Dr. Jane Smith',
    email: 'lecturer@example.com',
    registrationDate: '2022-01-15',
    department: 'Computer Science',
    employeeId: 'LC789012',
    courses: ['CS101', 'CS202', 'CS303']
  }
};

// Check if user is authenticated
export const isAuthenticated = (): boolean => {
  return authenticatedUser !== null;
};

// Get the current authenticated user
export const getCurrentUser = (): User | null => {
  return authenticatedUser;
};

// Register a new user
export const registerUser = (data: RegisterData): Promise<User> => {
  return new Promise((resolve, reject) => {
    // In a real app, this would call an API endpoint for registration
    setTimeout(() => {
      // Simple validation
      if (!data.email || !data.password || !data.name) {
        reject(new Error('All fields are required'));
        return;
      }

      // Check if user already exists
      if (users[data.email]) {
        reject(new Error('Email already registered'));
        return;
      }

      // Generate ID based on role
      const prefix = data.role === 'student' ? 'ST' : 'LC';
      const randomId = Math.floor(100000 + Math.random() * 900000).toString();
      const id = `${prefix}${randomId}`;

      // Create new user
      const newUser: User = {
        id,
        role: data.role,
        name: data.name,
        email: data.email,
        registrationDate: new Date().toISOString().split('T')[0],
        department: data.role === 'student' ? 'New Student' : 'New Lecturer',
        ...(data.role === 'student' ? { studentId: id } : { employeeId: id }),
        courses: []
      };

      // Add to "database"
      users[data.email] = newUser;
      
      resolve(newUser);
    }, 1000);
  });
};

// Login function
export const login = (email: string, password: string): Promise<User> => {
  return new Promise((resolve, reject) => {
    // In a real app, this would call an API endpoint for authentication
    setTimeout(() => {
      // Simple validation - any non-empty string for demo purposes
      if (!email || !password) {
        reject(new Error('Email and password are required'));
        return;
      }

      const user = users[email];
      if (user) {
        authenticatedUser = user;
        resolve(user);
      } else {
        reject(new Error('Invalid credentials'));
      }
    }, 1000);
  });
};

// Verify OTP function
export const verifyOtp = (otp: string): Promise<boolean> => {
  return new Promise((resolve, reject) => {
    // In a real app, this would validate the OTP with a backend service
    setTimeout(() => {
      if (otp && otp.length === 6 && /^\d+$/.test(otp)) {
        resolve(true);
      } else {
        reject(new Error('Invalid OTP. Please enter a 6-digit code.'));
      }
    }, 1000);
  });
};

// Logout function
export const logout = (): void => {
  authenticatedUser = null;
  toast({
    title: "Logged out",
    description: "You have been successfully logged out."
  });
};

// Check if user has specific role
export const hasRole = (role: 'student' | 'lecturer'): boolean => {
  return authenticatedUser?.role === role;
};

// Generate QR Code URL for two-factor authentication
// In a real app, this would be generated by the backend
export const generateQrCodeUrl = (email: string): string => {
  const encodedEmail = encodeURIComponent(email);
  return `otpauth://totp/ScholarPortal:${encodedEmail}?secret=JBSWY3DPEHPK3PXP&issuer=ScholarPortal`;
};

export default {
  isAuthenticated,
  getCurrentUser,
  login,
  verifyOtp,
  logout,
  hasRole,
  generateQrCodeUrl,
  registerUser
};
